/* tslint:disable */
/* eslint-disable */
/**
 * Resource Store API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1.3.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import { Configuration } from './configuration';
import globalAxios, { AxiosPromise, AxiosInstance } from 'axios';
// Some imports not used depending on template conditions
// @ts-ignore
import { DUMMY_BASE_URL, assertParamExists, setApiKeyToObject, setBasicAuthToObject, setBearerAuthToObject, setOAuthToObject, setSearchParams, serializeDataIfNeeded, toPathString, createRequestFunction } from './common';
// @ts-ignore
import { BASE_PATH, COLLECTION_FORMATS, RequestArgs, BaseAPI, RequiredError } from './base';

/**
 * a text document
 * @export
 * @interface TextDocRequest
 */
export interface TextDocRequest {
    /**
     * 
     * @type {string}
     * @memberof TextDocRequest
     */
    title?: string;
    /**
     * 
     * @type {string}
     * @memberof TextDocRequest
     */
    content?: string;
}
/**
 * a stored text document
 * @export
 * @interface TextDocResponse
 */
export interface TextDocResponse {
    /**
     * 
     * @type {string}
     * @memberof TextDocResponse
     */
    id?: string;
    /**
     * 
     * @type {string}
     * @memberof TextDocResponse
     */
    title?: string;
    /**
     * 
     * @type {string}
     * @memberof TextDocResponse
     */
    content?: string;
    /**
     * 
     * @type {TextDocStatistics}
     * @memberof TextDocResponse
     */
    statistics?: TextDocStatistics;
}
/**
 * some statistics like annotation counts
 * @export
 * @interface TextDocStatistics
 */
export interface TextDocStatistics {
    /**
     * 
     * @type {TextDocStatisticsAnnotationCount}
     * @memberof TextDocStatistics
     */
    annotationCount?: TextDocStatisticsAnnotationCount;
}
/**
 * 
 * @export
 * @interface TextDocStatisticsAnnotationCount
 */
export interface TextDocStatisticsAnnotationCount {
    /**
     * 
     * @type {number}
     * @memberof TextDocStatisticsAnnotationCount
     */
    document?: number;
    /**
     * 
     * @type {number}
     * @memberof TextDocStatisticsAnnotationCount
     */
    documentPart?: number;
}

/**
 * AnnotationResourceApi - axios parameter creator
 * @export
 */
export const AnnotationResourceApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * 
         * @summary return a specific annotation
         * @param {string} id The unique identifier of a resource
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getAnnotation: async (id: string, options: any = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('getAnnotation', 'id', id)
            const localVarPath = `/annotations/{id}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * AnnotationResourceApi - functional programming interface
 * @export
 */
export const AnnotationResourceApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = AnnotationResourceApiAxiosParamCreator(configuration)
    return {
        /**
         * 
         * @summary return a specific annotation
         * @param {string} id The unique identifier of a resource
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getAnnotation(id: string, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<object>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getAnnotation(id, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
    }
};

/**
 * AnnotationResourceApi - factory interface
 * @export
 */
export const AnnotationResourceApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = AnnotationResourceApiFp(configuration)
    return {
        /**
         * 
         * @summary return a specific annotation
         * @param {string} id The unique identifier of a resource
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getAnnotation(id: string, options?: any): AxiosPromise<object> {
            return localVarFp.getAnnotation(id, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * AnnotationResourceApi - interface
 * @export
 * @interface AnnotationResourceApi
 */
export interface AnnotationResourceApiInterface {
    /**
     * 
     * @summary return a specific annotation
     * @param {string} id The unique identifier of a resource
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AnnotationResourceApiInterface
     */
    getAnnotation(id: string, options?: any): AxiosPromise<object>;

}

/**
 * AnnotationResourceApi - object-oriented interface
 * @export
 * @class AnnotationResourceApi
 * @extends {BaseAPI}
 */
export class AnnotationResourceApi extends BaseAPI implements AnnotationResourceApiInterface {
    /**
     * 
     * @summary return a specific annotation
     * @param {string} id The unique identifier of a resource
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AnnotationResourceApi
     */
    public getAnnotation(id: string, options?: any) {
        return AnnotationResourceApiFp(this.configuration).getAnnotation(id, options).then((request) => request(this.axios, this.basePath));
    }
}


/**
 * TextDocumentsApi - axios parameter creator
 * @export
 */
export const TextDocumentsApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * 
         * @summary create a single text document
         * @param {TextDocRequest} textDocRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createTextDocument: async (textDocRequest: TextDocRequest, options: any = {}): Promise<RequestArgs> => {
            // verify required parameter 'textDocRequest' is not null or undefined
            assertParamExists('createTextDocument', 'textDocRequest', textDocRequest)
            const localVarPath = `/docs/texts`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(textDocRequest, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary delete a single text document matching the id
         * @param {string} id The unique identifier of a resource
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteTextDocument: async (id: string, options: any = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('deleteTextDocument', 'id', id)
            const localVarPath = `/docs/texts/{id}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'DELETE', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary return a single text document matching the id
         * @param {string} id The unique identifier of a resource
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getTextDocument: async (id: string, options: any = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('getTextDocument', 'id', id)
            const localVarPath = `/docs/texts/{id}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary return a list of existing text documents
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listTextDocuments: async (options: any = {}): Promise<RequestArgs> => {
            const localVarPath = `/docs/texts`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * TextDocumentsApi - functional programming interface
 * @export
 */
export const TextDocumentsApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = TextDocumentsApiAxiosParamCreator(configuration)
    return {
        /**
         * 
         * @summary create a single text document
         * @param {TextDocRequest} textDocRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async createTextDocument(textDocRequest: TextDocRequest, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<TextDocResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.createTextDocument(textDocRequest, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary delete a single text document matching the id
         * @param {string} id The unique identifier of a resource
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async deleteTextDocument(id: string, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.deleteTextDocument(id, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary return a single text document matching the id
         * @param {string} id The unique identifier of a resource
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getTextDocument(id: string, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<TextDocResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getTextDocument(id, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary return a list of existing text documents
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async listTextDocuments(options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<TextDocResponse>>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.listTextDocuments(options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
    }
};

/**
 * TextDocumentsApi - factory interface
 * @export
 */
export const TextDocumentsApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = TextDocumentsApiFp(configuration)
    return {
        /**
         * 
         * @summary create a single text document
         * @param {TextDocRequest} textDocRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createTextDocument(textDocRequest: TextDocRequest, options?: any): AxiosPromise<TextDocResponse> {
            return localVarFp.createTextDocument(textDocRequest, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary delete a single text document matching the id
         * @param {string} id The unique identifier of a resource
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteTextDocument(id: string, options?: any): AxiosPromise<void> {
            return localVarFp.deleteTextDocument(id, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary return a single text document matching the id
         * @param {string} id The unique identifier of a resource
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getTextDocument(id: string, options?: any): AxiosPromise<TextDocResponse> {
            return localVarFp.getTextDocument(id, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary return a list of existing text documents
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listTextDocuments(options?: any): AxiosPromise<Array<TextDocResponse>> {
            return localVarFp.listTextDocuments(options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * TextDocumentsApi - interface
 * @export
 * @interface TextDocumentsApi
 */
export interface TextDocumentsApiInterface {
    /**
     * 
     * @summary create a single text document
     * @param {TextDocRequest} textDocRequest 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof TextDocumentsApiInterface
     */
    createTextDocument(textDocRequest: TextDocRequest, options?: any): AxiosPromise<TextDocResponse>;

    /**
     * 
     * @summary delete a single text document matching the id
     * @param {string} id The unique identifier of a resource
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof TextDocumentsApiInterface
     */
    deleteTextDocument(id: string, options?: any): AxiosPromise<void>;

    /**
     * 
     * @summary return a single text document matching the id
     * @param {string} id The unique identifier of a resource
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof TextDocumentsApiInterface
     */
    getTextDocument(id: string, options?: any): AxiosPromise<TextDocResponse>;

    /**
     * 
     * @summary return a list of existing text documents
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof TextDocumentsApiInterface
     */
    listTextDocuments(options?: any): AxiosPromise<Array<TextDocResponse>>;

}

/**
 * TextDocumentsApi - object-oriented interface
 * @export
 * @class TextDocumentsApi
 * @extends {BaseAPI}
 */
export class TextDocumentsApi extends BaseAPI implements TextDocumentsApiInterface {
    /**
     * 
     * @summary create a single text document
     * @param {TextDocRequest} textDocRequest 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof TextDocumentsApi
     */
    public createTextDocument(textDocRequest: TextDocRequest, options?: any) {
        return TextDocumentsApiFp(this.configuration).createTextDocument(textDocRequest, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary delete a single text document matching the id
     * @param {string} id The unique identifier of a resource
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof TextDocumentsApi
     */
    public deleteTextDocument(id: string, options?: any) {
        return TextDocumentsApiFp(this.configuration).deleteTextDocument(id, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary return a single text document matching the id
     * @param {string} id The unique identifier of a resource
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof TextDocumentsApi
     */
    public getTextDocument(id: string, options?: any) {
        return TextDocumentsApiFp(this.configuration).getTextDocument(id, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary return a list of existing text documents
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof TextDocumentsApi
     */
    public listTextDocuments(options?: any) {
        return TextDocumentsApiFp(this.configuration).listTextDocuments(options).then((request) => request(this.axios, this.basePath));
    }
}


